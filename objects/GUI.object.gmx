<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
depth = global.GUI_depth;
var margin = 10;
enemyProfileX   = ((view_wview[0] - margin) - sprite_get_width(spr_profiles));
enemyProfileY   = (0 + margin);

playerProfileX  = (0 + margin);
playerProfileY  = ((view_hview[0] - margin) - sprite_get_height(spr_profiles));
imageOffsetX = 22;
imageOffsetY = 43;
playerCrescentX = 6;
playerCrescentY = playerProfileY + 174;


defaultHandScale = 0.4;
handScale = defaultHandScale;
handXSeparation = margin + (sprite_get_width(spr_card)*handScale);
playerHandX = (playerProfileX + (sprite_get_width(spr_profiles) + (margin*5) ));
playerHandY = playerProfileY;

// hand show/hide button
showHand = true;
instance_create (
    playerProfileX + (sprite_get_width(spr_profiles) - 40),
    (view_hview[0] - 40),
    button_ShowHand
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the GUI

// draw the player profile pictures

draw_sprite(spr_profiles, 0, enemyProfileX,  enemyProfileY);
draw_sprite(spr_profiles, 1, playerProfileX, playerProfileY);

draw_sprite(spr_gui_crescent, 0, playerCrescentX, playerCrescentY);


// draw the player's hand
if (showHand == true) {
    var cardWidth = sprite_get_width(spr_card);
    var cardHeight = sprite_get_height(spr_card);
    var hand = global.player.hand;
    var mouseOverCard = -1;
    var cardOverIndex = -1;
    var x1;
    var y1;
    
    for(var i=0; i&lt;ds_list_size(hand); i++) {
        var handScale = defaultHandScale;
        x1 = playerHandX + (i * handXSeparation);
        y1 = playerHandY;
        
        if  (mouse_x &gt; x1) and (mouse_y &gt; playerHandY)
        and (mouse_x &lt; (x1 + cardWidth * defaultHandScale)) 
        and (mouse_y &lt; (playerHandY + cardHeight * defaultHandScale)) {
            mouseOverCard = ds_list_find_value(hand, i);
            cardOverIndex = i;
            show_debug_message("card over: " +string(i) + " : " +string(mouseOverCard));
        }
        
        draw_sprite_ext(spr_card, 1, x1, y1, handScale, handScale, 0, c_white, 1);
        
        var card = ds_list_find_value(hand, i);
        draw_sprite_ext(card.image, 0, x1 + (imageOffsetX * handScale), y1 + (imageOffsetY * handScale), handScale, handScale, 0, c_white, 1);    
    }
    
    
    // zoomed card
    zoomScale           = (defaultHandScale * 2);
    var halfWidth       = ((cardWidth * zoomScale) * 0.5);
    
    if (mouseOverCard &gt; -1) {
        x1 = (playerHandX + (cardOverIndex * handXSeparation)) - (halfWidth * 0.5) ;
        y1 = (view_hview[0] - (cardHeight * zoomScale));
        
        draw_sprite_ext(spr_card, 1, x1, y1, zoomScale, zoomScale, 0, c_white, 1);
        
        
        draw_sprite_ext(mouseOverCard.image, 0, x1 + (imageOffsetX * zoomScale), y1 + (imageOffsetY * zoomScale), zoomScale, zoomScale, 0, c_white, 1);    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
