<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLASS VARS

depth = global.card_depth;
name = "";
class = "";
description = "This is the default card and if you're reading this, something went wrong";
castingCost = 1;
abilities = ds_list_create();
classes = ds_list_create();
sprite_index = spr_card;
image_index = round(random(image_number - 1));
image_speed = 0;
scale = global.card_hand_scale;
activated = false;
activationChecking = false;
displayed = false;  // display or don't display the card
position  = "none"; // in "hand", in "deck", on "board", in "graveyard", or "none"
faceUp    = false;  // 0 or 1, false or true, it corresponds to the image_index.
setup_glowing();


/// INTERACTION
doubleClickWindow = 0;


/// CARD ELEMENTS

// casting cost
base_castCircleX = 278;
base_castCircleY = 4;
castCircleX = base_castCircleX;
castCircleY = base_castCircleY;
base_castingCostX = 295;
base_castingCostY = 5;
castingCostX = base_castingCostX;
castingCostY = base_castingCostY;

base_nameX = 35;
base_nameY = 3;
nameX = base_nameX;
nameY = base_nameY;

base_classX = 35;
base_classY = 260;
classX = base_classX;
classY = base_classY;

base_descriptionX = 35;
base_descriptionY = 303;
descriptionX = base_descriptionX;
descriptionY = base_descriptionY;
base_descriptionWidth = 280;
descriptionWidth = base_descriptionWidth;
base_separation = 30;
separation = base_separation;

base_artX = 22;
base_artY = 43;
artX = base_artX;
artY = base_artY;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// state and element positions

if (doubleClickWindow &gt; 0)
  then doubleClickWindow--;

if (displayed == true) {
    visible = true;
} else visible = false;

image_index = faceUp;

switch (position) {
    case "hand":
    //depth = global.hand_depth;
    //displayed = true;
    scale = global.card_hand_scale;
    image_xscale = scale;
    image_yscale = scale;
    y = HAND_CONTROLLER.handY;
    break;
    
    case "board":
    //depth = global.card_depth;
    displayed = true;
    scale = global.card_board_scale;
    image_xscale = scale;
    image_yscale = scale;
    break;
    
    case "deck":
        displayed = false;
    break;
}


if (mouseOverCard() == id) {
    y = (HAND_CONTROLLER.handY - 30);
    depth -= 10; // just make it appear above all other cards
    
    if (global.controls_accept == true) {
        if (doubleClickWindow &gt; 0) {
            show_debug_message("Double-click registered : "+string(id));
            activationChecking = true;
        } else doubleClickWindow = CONTROLS.doubleClickWindowMax;
    }
}




/// position card elements
castCircleX = x + (base_castCircleX * scale);
castCircleY = y + (base_castCircleY * scale);
castingCostX = x + (base_castingCostX * scale);
castingCostY = y + (base_castingCostY * scale);

nameX = x + (base_nameX * scale);
nameY = y + (base_nameY * scale);

classX = x + (base_classX * scale);
classY = y + (base_classY * scale);

artX = x + (base_artX * scale);
artY = y + (base_artY * scale);

descriptionX = x + (base_descriptionX * scale);
descriptionY = y + (base_descriptionY * scale);
separation = (base_separation * scale);
descriptionWidth = (base_descriptionWidth * scale);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw self and card elements

draw_set_color(c_black);

if (displayed) {
    draw_self();
    
    if (faceUp) {
        // name
        draw_set_font(font_bold);
        draw_text(nameX, nameY, name);
        
        // casting cost
        draw_set_halign(fa_center);
        draw_sprite_ext(spr_cost_circle, 0, castCircleX, castCircleY, scale, scale, 0, c_white, 1);
        draw_text(castingCostX, castingCostY, castingCost);
        draw_set_halign(fa_left);
        
        // art
        draw_sprite_ext(image, image_index, artX, artY, scale, scale, 0, c_white, 1);
        
        // class
        draw_set_font(font_normal);
        draw_text(classX, classY, class);
        
        // abilities
        var size = ds_list_size(abilities);
        var str = "";
        for(var i=0; i&lt;ds_list_size(size); i++) {
            var ability = ds_list_find_value(abilities, i);
            if !(is_undefined(ability)) {
                str += string(ability) + ", ";
            } else break;
        }
        
        // replace the last ", " with "."
        if (str != "") {
            str = string_copy(str, 1, string_length(str)-2);
            str += ".#";
        }
        
        // description
        draw_set_font(font_normal);
        draw_text_ext(descriptionX, descriptionY, str + string(description), separation, descriptionWidth);
    }
    
    check_glow();   // draw the hover glow behind the sprite
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
