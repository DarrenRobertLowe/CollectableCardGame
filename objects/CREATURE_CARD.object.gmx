<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CARD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLASS VARS
event_inherited();

subclass    = "";
type        = CREATURE_CARD

// stats
baseAttack  = 1;
baseDefence = 0;
baseHp      = 1;
attack      = baseAttack;
defence     = baseDefence;
hp          = baseHp;

// classes
ds_list_add(classes, "Creature");

// default values
hasSummoningSickness = false;
attacking = false;
target    = noone;
canAttack = true;
attackEvent = instance_create(x, y, Event_Combat);
attackEvent.parent = id;
attackedThisTurn = false;

// stats positioning
base_statValuesY = 468;
base_attackX = 71;
attackX = base_attackX;

base_defenceX = 177;
defenceX = base_defenceX;

base_hpX = 289;
defenceX = base_defenceX;

// stat icons positioning
base_attackIconX    = 17;
base_defenceIconX   = 121;
base_hpIconX        = 231;
base_iconY          = 468;

attackIconX  = base_attackIconX;
defenceIconX = base_defenceIconX;
hpIconX      = base_hpIconX;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// recalculate stats

attack      = baseAttack;
defence     = baseDefence;
attacking   = false;

//hp          = baseHp; // MTG rule

// for(var i=0; i&lt;ds_list_size(enchantments); i++){ ... apply enchantments effects ... }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interaction
event_inherited();
if (owner == global.player) {
    if (castingChecking) {
        castingChecking = false;
        if (basicActivationChecks()) {
            event_user(0); // summon
        }
    }
}

if (global.GAME_PHASE == "combat") {
    if (position == "board") {
        
        // allow attack CANCEL
        if (global.currentCard == id) {
            if (global.choosingAttackTarget) {
                if (global.controls_cancel) {
                    attacking = false;
                    attackEvent.attacking = false;
                    global.currentCard = id;
                    global.target = noone;
                    global.choosingAttackTarget = false; 
                }
            }
        }
        
        if (clicked) {
            clicked = false;
            
            // Our turn
            if (global.TURN == owner) {
                // Attacking
                if (global.choosingAttackTarget == false) {
                    // start the attacking state
                    if (!(attacking) and !(attackedThisTurn)) {
                        attacking = true;
                        global.currentCard = id;
                        global.target = noone;
                        global.choosingAttackTarget = true;
                    }
                }
            }
            
            // not our turn
            if  (global.TURN != owner) 
            and (global.currentCard != id) {
                // allow this card to be selected as a combat target
                if (global.choosingAttackTarget == true) {
                    if (global.currentCard.owner != owner) {
                        if (mouseOverCard() == id) {
                            glowing = true;
                            if (clicked) {
                                clicked = false;
                                global.target = id;
                            }
                        }
                    }
                }
            }
        } // end (clicked)
        
        
        // ATTACK ENEMY
        var target = global.target;
        if (global.currentCard == id) {
            if (target != noone) { 
                if (object_is_ancestor(target.object_index, CREATURE_CARD)) 
                or (object_is_ancestor(target.object_index, CONTESTANT)) { // we've chosen a target
                    show_debug_message("target: "+ string(target));
                    if (target.position == "board") {
                        if (target.owner != owner) {
                            attackEvent.attacking = true;
                            attackEvent.target = global.target;
                            ds_list_insert(global.EVENT_LIST, 0, attackEvent);
                            nextEvent(); // perform the attack
                            
                            // finish
                            global.currentCard = noone;
                            global.choosingAttackTarget = false;
                        }
                    }
                }
            }
        }
    } // end (position == "board")
} // end (combat)

// clear click state
clicked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SUMMON
debug("Summoned " +string(name));

var side = noone;
if (global.TURN == global.player)
    then side = PLAYER_CARDSLOT;
else side = ENEMY_CARDSLOT;

if (placeOnBoard(side, id) &gt; 0) {
    finishSummoning();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw attack, defence and hp
event_inherited();

// draw stat icons
if (faceUp == true) {
    // darken stat icons if we can't play the card right now
    if (canPlay == false) { 
        draw_sprite_ext(spr_stat_icons, 0, attackIconX, attackIconY, scale, scale, 0, c_gray, 1);
        draw_sprite_ext(spr_stat_icons, 1, defenceIconX, defenceIconY, scale, scale, 0, c_gray, 1);
        draw_sprite_ext(spr_stat_icons, 2, hpIconX, hpIconY, scale, scale, 0, c_gray, 1);
    } else {
        draw_sprite_ext(spr_stat_icons, 0, attackIconX, attackIconY, scale, scale, 0, c_white, 1);
        draw_sprite_ext(spr_stat_icons, 1, defenceIconX, defenceIconY, scale, scale, 0, c_white, 1);
        draw_sprite_ext(spr_stat_icons, 2, hpIconX, hpIconY, scale, scale, 0, c_white, 1);
    }
    
    
    // attack and hp(defence)
    switch (position) {
        case "hand":
        case "graveyard":
            draw_set_font(global.font_CardBold_Hand);
        break;
        
        case "board":
            draw_set_font(global.font_CardBold_Board);
        break;
    }
    
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_set_color(c_black);
    
    // attack
    if (attack &lt; baseAttack)
        then draw_set_color(c_orange);
    if (attack &gt; baseAttack)
        then draw_set_color(c_green);
    draw_text(attackX,  attackY,  attack);
    
    // defence
    if (defence &lt; baseDefence)
        then draw_set_color(c_orange);
    if (defence &gt; baseDefence)
        then draw_set_color(c_green);
    draw_text(defenceX, defenceY, defence);
    
    // health
    if (hp &lt; baseHp)
        then draw_set_color(c_red);
    draw_text(hpX, hpY, hp);
    
    // reset text
    draw_set_color(c_black);
    draw_set_halign(fa_left);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
