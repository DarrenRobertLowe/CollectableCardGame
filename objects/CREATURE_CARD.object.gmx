<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CARD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLASS VARS
event_inherited();

subclass    = "";
type        = CREATURE_CARD

// stats
baseAttack  = 1;
baseDefence = 0;
baseHp      = 1;
attack      = baseAttack;
defence     = baseDefence;
hp          = baseHp;


// classes
ds_list_add(classes, "Creature");

// default values
attackable = true;
summoned  = false;
attacking = false;
target    = noone;
attackedThisTurn = false;
canAttack = true;   // e.g. walls can't attack
canDefend = true;   // e.g. assassins can't defend
canMoveLane = false;


// CARD ELEMENT POSITIONS
// position attack/defence
statValuesY = 468;
attackX  = 71;
attackY  = statValuesY;
defenceX = 177;
defenceY = statValuesY;
hpX      = 289;
hpY      = statValuesY;

// position stat icons
iconsY      = 468;
attackIconX = 17;
attackIconY = iconsY;
defenceIconX  = 121;
defenceIconY  = iconsY;
hpIconX     = 231;
hpIconY     = iconsY;

//AI
preferredSlot = FRONT_SLOT; // FRONT_SLOT or BACK_SLOT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset stats

attack      = baseAttack;
defence     = baseDefence;
attacking   = false;
//hp          = baseHp; // MTG style rules



for(var i=0; i&lt;ds_list_size(enchantments); i++) { 
    var enchantment = ds_list_find_value(enchantments, i);
    
    with(enchantment) {
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interaction
event_inherited();

if (castingChecking) {
    castingChecking = false;
    
    if (summoned == false) {
        if (basicActivationChecks()) {
            selectingSummonSlot = true;
            global.summoning = true;
            global.currentCard = id;
        }
    }
}


if (selectingSummonSlot) {
    global.TURN.hand.forceHideContents = true;
    global.TURN.graveyard.showContents = false;
    
    with(BACK_SLOT) {
        if (owner == global.TURN) {
            glow();
            
            if (clicked) {
                if (card == noone) {
                    other.slot = id;
                    card = other.id;
                    other.selectingSummonSlot = false;
                    summonCreature(other.id);
                }
            }
        }
    }
}

if (global.GAME_PHASE == "main" or global.GAME_PHASE == "aftermath") {
    if (canMoveLane) {
        if (clicked == true) {
            clicked = false;
            
            if (doubleClickWindow &gt; 0) {
                show_debug_message("Double-click registered : "+string(id));
                
                if (slot.alternativeSlot.card == noone) {
                    slot.card = noone;
                    slot = slot.alternativeSlot;
                    slot.card = id;
                    canMoveLane = false;
                    show_debug_message("Moved into slot");
                } else {
                    show_debug_message("Alternative slot is full: " + string(slot.alternativeSlot.card));
                }
                
                doubleClickWindow = 0;
            } else {
                doubleClickWindow = CONTROLS.doubleClickWindowMax;
            }
        }
    }
}

if (global.GAME_PHASE == "combat") {
    if (position == "board") {
        
        // allow attack CANCEL
        if (global.currentCard == id) {
            if (global.choosingAttackTarget) {
                if (global.controls_cancel) {
                    attacking = false;
                    global.currentCard = id;
                    global.target = noone;
                    global.choosingAttackTarget = false;
                }
            }
        }
        
        if (clicked) {
            clicked = false;
            
            // Our turn
            if (global.TURN == owner) {
                // Attacking
                if (global.choosingAttackTarget == false) {
                    // start the attacking state
                    if (creatureCanAttack(id)) {
                        attacking = true;
                        
                        global.currentCard = id;
                        global.target = noone;
                        global.choosingAttackTarget = true;
                    }
                }
            }
            
            // not our turn
            if  (global.TURN != owner) 
            and (global.currentCard != id) {
                // allow this card to be selected as a combat target
                if (global.choosingAttackTarget == true) {
                    if (global.currentCard.owner != owner) {
                        if (mouseOverCard() == id) {
                            glowing = true;
                            if (clicked) {
                                clicked = false;
                                global.target = id;
                            }
                        }
                    }
                }
            }
        } // end (clicked)
        
        
        // ATTACK ENEMY
        var target = global.target;
        if (global.currentCard == id) {
            if (target != noone) {
                if (object_is_ancestor(target.object_index, CONTESTANT)) {
                    if !(hasDefenders(target)) {
                        if (target.owner != owner) {
                            event_user(1); // setup and perform the attack
                        }
                    }
                }
                
                if (object_is_ancestor(target.object_index, CREATURE_CARD)) {
                    if (target.position == "board") {
                        if (target.owner != owner) {
                            event_user(1); // setup and perform the attack
                        }
                    }
                }
            }
        }
    } // end (position == "board")
} // end (combat)

// clear click state
clicked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MAIN PHASE STARTED

canMoveLane = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP AND PERFORM ATTACK

attackedThisTurn = true;

show_debug_message(object_get_name(object_index) + " - " + string(id) + " is attacking");

show_EventPopup(id, global.target, "Attacking");
fight(id, global.target);

// finish
global.currentCard = noone;
global.choosingAttackTarget = false;

// end the phase if no other creatures on the battlefield can attack
if(!anyCreaturesCanAttack(getCreatures(owner))) {
    nextPhase();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SUMMON
debug("Summoned " +string(name));


if (ds_list_find_index(abilities, "Haste")) {
    canMoveLane = true;
} else {
    canMoveLane = false;
}

global.TURN.hand.forceHideContents = false;
finishSummoning();
removeFromHand(id);
global.currentCard = noone;
position = "board";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
