<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CARD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLASS VARS
event_inherited();

subclass    = "";
type        = CREATURE_CARD

// stats
baseAttack  = 1;
baseDefence = 0;
baseHp      = 1;
attack      = baseAttack;
defence     = baseDefence;
hp          = baseHp;
image       = art_Mana_Creature_01;

// classes
ds_list_add(classes, "Creature");

// default values
attackable = true;
summoned  = false;
attacking = false;
target    = noone;
attackedThisTurn = false;
canAttack = true;   // e.g. walls can't attack
canDefend = true;   // e.g. assassins can't defend
canMoveLane = false;
movedLane   = false;
slot = noone;

// CARD ELEMENT POSITIONS
// position attack/defence
statValuesY = 468;
attackX  = 71;
attackY  = statValuesY;
defenceX = 177;
defenceY = statValuesY;
hpX      = 289;
hpY      = statValuesY;

// position stat icons
iconsY      = 468;
attackIconX = 17;
attackIconY = iconsY;
defenceIconX  = 121;
defenceIconY  = iconsY;
hpIconX     = 231;
hpIconY     = iconsY;


// AI
preferredSlot = FRONT_SLOT; // FRONT_SLOT or BACK_SLOT


// Indicators
slotArrow = instance_create(x, y, SlotArrow);
slotArrow.parent = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy dependencies (e.g. SlotArrow)
event_inherited();


if (exists(slotArrow)) {
    instance_destroy(slotArrow, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset stats

attack      = baseAttack;
defence     = baseDefence;
attacking   = false;
//hp          = baseHp; // MTG style rules



for(var i=0; i&lt;ds_list_size(enchantments); i++) { 
    var enchantment = ds_list_find_value(enchantments, i);
    
    with(enchantment) {
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interaction
event_inherited();

if (castingChecking) {
    castingChecking = false;
    
    if (summoned == false) {
        if (basicActivationChecks()) {
            global.selectingSummonSlot = true;
            global.summoning = true;
            global.currentCard = id;
            waitTime = (room_speed * 0.25);
        }
    }
}

/// INTERACTIVITY
if (waitTime &gt; 0) {
    waitTime--;
} else {
    // summoning
    if (global.currentCard == id) {
        if (global.selectingSummonSlot) {
            // allow us to select a slot
            enforceHideCards();
            glowCardSlots();
            allowCancelSelectSummonSlot();
            selectSummonSlot();
        } else {
            unenforceHideCards();
        }
    } else {
        unenforceHideCards();
    }
    
    
    if (global.GAME_PHASE == "combat") {
        // attack
        if (position == "board") {
            // make potential targets glow
            if (global.TURN != owner) {
                if (!global.choosingAttackTarget)
                  then glowing = true;
                else glowing = false;
            }
            
            if (global.choosingAttackTarget) {
                if (global.TURN == global.player) {
                    enforceHideCards();
                    allowCancelCombatTarget();
                }
            }
            
            
            if (clicked) {
                if (!global.choosingAttackTarget) {
                    combat_trySelectAsAttacker();
                } else {
                    combat_trySelectAsAttackTarget();
                }
            }
            
            
            if (global.target &gt; 0) {
                if (global.currentCard == id) {
                    combat_initiateAttackTarget();
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy SLOT_ARROW associated with this card

event_inherited();

if (exists(slotArrow)) {
    instance_destroy(slotArrow, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MAIN PHASE STARTED

canMoveLane = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP AND PERFORM ATTACK

attackedThisTurn = true;

show_debug_message(object_get_name(object_index) + " - " + string(id) + " is attacking");

show_EventPopup(id, global.target, "Attacking");
fight(id, global.target);

// finish
global.choosingAttackTarget = false;
global.currentCard = noone;
global.target = noone;

// end the phase if no other creatures on the battlefield can attack
var creatures = getCreatures(owner);
if(!anyCreaturesCanAttack(creatures)) {
    nextPhase();
}

// clean up
if (ds_exists(creatures, ds_type_list)) {
    ds_list_destroy(creatures);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SUMMON
show_debug_message("Summoned " +string(name));

if (ds_list_find_index(abilities, "Haste")) {
    canMoveLane = true;
} else {
    canMoveLane = false;
}

global.TURN.hand.forceHideContents = false;
finishSummoning();
removeFromHand(id);
global.currentCard = noone;
position = "board";
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
