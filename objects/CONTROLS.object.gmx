<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup

doubleClickWindowMax = 15;
clickableUnderPointer = ds_priority_create();

// cursor fields
animate     = false;
rotate      = 0;        // used when displaying the wand
rotateCorrectionSpeed = 10;
rotateSpeed = 1;
inertia     = 0;
rotateFriction = 1;
rotateMax   = 40;
rotateMin   = -120;
rotateDir   = 0;
old_mouse_x = mouse_x;
depth = global.drawing_depth;

setup_wand_particles();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controls and mouse over
x = mouse_x;
y = mouse_y;


// find what the mouse pointer is over
ds_priority_clear(clickableUnderPointer);

if (global.POPUP_active == false) {
    with(CLICKABLE) {
        if (mouseOver()) {
            if (displayed) {
                ds_priority_add(CONTROLS.clickableUnderPointer, id, depth);
                //show_debug_message("Added to queue: " + string(id) + " with depth: " + string(depth));
            }
        }
    }
}

/// check_controls
global.controls_cancel = false;
global.controls_accept = false;

if (mouse_check_button_released(mb_left)) {
    global.controls_accept = true;
    mouse_clear(mb_left);
}

if (mouse_check_button_released(mb_right)) {
    global.controls_cancel = true;
    mouse_clear(mb_right);
}


// particles
if (global.castingSpell) {
    window_set_cursor(cr_none);
    wand_rotate(); // make the wand responsive to mouse movement
    wand_rotateToNormal();
    part_particles_create(particle_system, x, y, particle_type, particleCount);
} else {
    window_set_cursor(cr_default);
}


// finish
old_mouse_x = mouse_x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// determine what we're clicking on

if (ds_priority_size(clickableUnderPointer) &gt; 0) {
    global.target = ds_priority_find_min(clickableUnderPointer);
    if (global.target != noone){
        global.target.clicked = true;
        show_debug_message("clicked: " +string(global.target));
    }
}



ds_priority_clear(clickableUnderPointer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CURSOR

if (global.castingSpell) {
    draw_sprite_ext(spr_gui_wand, 0, x, y, 1, 1, rotate, c_white, 1);
}

if (global.GAME_PHASE == "combat") {
    if (global.choosingAttackTarget) {
        draw_sprite_ext(spr_attacking, 0, mouse_x, mouse_y, 0.5, 0.5, 0, c_yellow, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
