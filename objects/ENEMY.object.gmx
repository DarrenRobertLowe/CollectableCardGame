<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CONTESTANT</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup this specific contestant's stats and deck
event_inherited();

image_index = 1;    // avatar for deck

reset_AI_actions();


ds_list_add(cards, create_card(cc_VampireBat, id));
ds_list_add(cards, create_card(cc_VampireBat, id));
ds_list_add(cards, create_card(cc_VampireBat, id));
ds_list_add(cards, create_card(cc_VampireBat, id));
ds_list_add(cards, create_card(cc_Ankylo, id));
ds_list_add(cards, create_card(cc_Ankylo, id));
ds_list_add(cards, create_card(cc_Ankylo, id));
ds_list_add(cards, create_card(cc_Ankylo, id));
ds_list_add(cards, create_card(spell_Bolt, id));
ds_list_add(cards, create_card(spell_Bolt, id));
ds_list_add(cards, create_card(spell_Bolt, id));
ds_list_add(cards, create_card(spell_Bolt, id));
ds_list_add(cards, create_card(spell_Heal, id));
ds_list_add(cards, create_card(spell_Heal, id));
ds_list_add(cards, create_card(spell_Heal, id));
ds_list_add(cards, create_card(spell_Heal, id));
ds_list_add(cards, create_card(enchant_Vigor, id));
ds_list_add(cards, create_card(enchant_Vigor, id));
ds_list_add(cards, create_card(enchant_Vigor, id));
ds_list_add(cards, create_card(enchant_Vigor, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ember, id));
ds_list_add(cards, create_card(resource_Ether, id));
ds_list_add(cards, create_card(resource_Ether, id));
ds_list_add(cards, create_card(resource_Ether, id));
ds_list_add(cards, create_card(resource_Ether, id));
ds_list_add(cards, create_card(resource_Catalyst, id));
ds_list_add(cards, create_card(resource_Catalyst, id));
ds_list_add(cards, create_card(resource_Catalyst, id));
ds_list_add(cards, create_card(resource_Catalyst, id));

// combat
ourCreatures        = ds_list_create();
theirCreatures      = ds_list_create();
ourBestCreatures    = ds_priority_create();
theirScariest       = ds_priority_create();
//AI_monsterList      = ds_priority_create();
listedCreatures     = false;


deck = instance_create(((view_wview[0] - 10) - sprite_get_width(spr_avatars)), 10, DECK);
deck.owner = id;
deck.cards = cards;
deck.sprite_index = spr_avatars;
deck.image_index = image_index;
deck.alarm[0] = 1;  // shuffles the deck and creates the play stack

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ENEMY AI
if (waitTime &gt; 0)
or (global.WAIT &gt; 0){
    if (global.WAIT &gt; waitTime)
      then waitTime = global.WAIT;
      
    waitTime--;
} else {
    if (global.TURN == id) {
        if (global.GAME_PHASE == "draw") {
            readDefendingCreatures = false;
            draw_card(hand, deck);
            waitTime = room_speed;
            show_debug_message("drew a card");
            nextPhase();
            exit;
        }
        
        if (global.GAME_PHASE == "payment") {
            show_debug_message("entered payment phase");
            waitTime = room_speed;
            nextPhase();
            show_debug_message("left payment phase");
            exit;
        }
        
        if (global.GAME_PHASE == "main") {
            waitTime = room_speed;
            show_debug_message("entered main phase");
            AI_main_phase()
        }
        

        if (global.GAME_PHASE == "combat") {
            AI_combat_phase();
        }
        
        if (global.GAME_PHASE == "aftermath") {
            AI_main_phase()
        }
        
        if (global.GAME_PHASE == "endturn") {
            nextPhase();
            exit;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
