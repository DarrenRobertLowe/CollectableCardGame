<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// default parameters

performer   = noone;
target      = noone;
keyword     = "Casting";
minlifetime = (room_speed * 0.25);   // prevents accidentally dismissing the message
maxlifetime = -1; // -1 for infinite lifetime
depth       = global.info_depth;
cardScale   = 0.7;


var cardWidth   = (sprite_get_width(spr_card)  * cardScale);
var cardHeight  = (sprite_get_height(spr_card) * cardScale);
var middle      = (room_height * 0.5);
var center      = (room_width  * 0.5);
var leftHalf    = (room_width  * 0.25);
var rightHalf   = (room_width  * 0.75);
var halfCard    = (cardWidth * 0.5);

cardY           = (middle - (cardHeight * 0.5));
performerX      = (leftHalf - halfCard);
targetX         = (rightHalf - halfCard);
singleCardX     = (center - halfCard);
singleTextX     = center;
performerTextX  = leftHalf;
targetTextX     = rightHalf;

var backgroundMargin = 60;
titleY = (cardY - 90);
backgroundX     = 0;
backgroundY     = (titleY - backgroundMargin);
backgroundEndX  = view_wview[0];
backgroundEndY  = ((cardY + cardHeight) + backgroundMargin);
backgroundColour = make_colour_rgb(10, 0, 0);
backgroundAlpha = 0.8;

global.POPUP_active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// deactivate popup

global.POPUP_active = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// countdown lifetime

if (maxlifetime &gt; -1) {
    maxlifetime--;
    
    if (maxlifetime &lt;= 0) {
        instance_destroy(self, true);
    }
}

if (minlifetime &gt; 0) {
    minlifetime--;
} else {
    if (global.controls_accept) {
        maxlifetime = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the event info
var targetSprite = 0;
var targetIndex = 0;
var targetScale = cardScale;

// draw the background
draw_set_alpha(backgroundAlpha);
draw_rectangle_colour(backgroundX, backgroundY, backgroundEndX, backgroundEndY, backgroundColour, backgroundColour, backgroundColour, backgroundColour, false);
draw_set_alpha(1);
draw_set_font(global.font_InfoPopupTitles);
draw_set_colour(global.GUI_title_colour);
draw_set_halign(fa_center);

// draw the activated card
if (target == noone) {
    draw_text(singleTextX, titleY, keyword);
    draw_sprite_ext(performer.cardSurfaceSprite, 0, singleCardX, cardY, cardScale, cardScale, 0, c_white, 1);
} else {
    // draw the activated card
    draw_text(performerTextX, titleY, keyword);
    draw_sprite_ext(performer.cardSurfaceSprite, 0, performerX, cardY, cardScale, cardScale, 0, c_white, 1);
}

// draw the target if there is one
if ( exists(target) ) {
    draw_text(targetTextX, titleY, "Target");
    
    if ( object_is_ancestor(target.object_index, CONTESTANT) ) {
        targetSprite = target.deck.sprite_index;
        targetIndex = target.deck.image_index;
        targetScale = 1;
    } else {
        targetSprite = target.cardSurfaceSprite;
        targetIndex = target.artVariant;
    }
    
    draw_sprite_ext(targetSprite, targetIndex, targetX, cardY, targetScale, targetScale, 0, c_white, 1);
}

// reset text
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
