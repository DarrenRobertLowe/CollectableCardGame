<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>SPELL_CARD</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deals a specific amount of damage (N) or heals by that amount.
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// targeting
event_inherited();

if (choosingTarget) {
    CONTROLS.animate = true;
    global.currentCard = id;
    
    
    //show_debug_message("CHOOSING TARGET!");
    if (global.controls_cancel == true) {
        stopTargeting();
        show_debug_message("Cancelled.");
    }
    
    
    var target  = noone;
    var ptarget = noone;
    
    if (global.target != noone) {
        
        if (object_is_ancestor(global.target.object_index, TARGETABLE)) {
        
            if (ds_list_find_index(validTargets, "player") &gt; -1) {
                if (global.target.object_index == DECK) {
                    ptarget = global.target.owner;
                }
            }
            
            
            if (global.target.type == CREATURE_CARD) {
                if (global.target.position == "board") {
                    if (ds_list_find_index(validTargets, "creature on board") &gt; -1) {
                        ptarget = global.target;
                    }
                }
            }
        }
    }

    
    if (ptarget != noone) {
        show_debug_message("potential target is : " +string(ptarget));
        
        ptarget.glowing = true;
        if (global.controls_accept) {
            target = ptarget;
            show_debug_message("Actual target is : " +string(target));
            global.choosingTarget = false;
            choosingTarget = false;
            event_user(0);
            damage(target, attack);
            completeCasting();
            stopTargeting();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
