<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hourglass</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>CLICKABLE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup
event_inherited();

depth = global.GUI_button_depth;
showPhaseBanner = false;
bannerTimesOut  = false;

bannerTimer = 0;
bannerTimerMax = 90;
bannerX = (room_width * 0.5);
bannerY = (room_height * 0.5);
animate = false;
animationTimeMax = 20;
animationTime = 0;
option_doubleClickRequired = false;

/// floating animation
anim_float_setup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interaction
event_inherited();


// hover on mouse over
if (animate == false) {    
    if (mouseOver()) {
        if (ds_list_empty(global.NEXT_PHASE_BLOCKERS)) {
            anim_float();
        }
    } else {
        anim_floatReturn();
        rotateSwitch = choose(0, 1);
        hoverSwitch  = 0; //choose(0, 1);
    }
}

// not in a locked-in animation (changing phase)
if (animate == false) {
    if (clicked) {
        if (global.WAIT &lt;= 0) {
            clicked = false;
            if (ds_list_empty(global.NEXT_PHASE_BLOCKERS)) {
                if (option_doubleClickRequired) {
                    if (doubleClickWindow &gt; 0) {
                        doubleClickWindow = 0;
                        nextPhase();
                        animate = true;
                        animationTime = animationTimeMax;
                    } else {
                        doubleClickWindow = CONTROLS.doubleClickWindowMax;
                    }
                } else {
                    nextPhase();
                    animate = true;
                    animationTime = animationTimeMax;
                }
            }
        } else show_debug_message("can't click now, waiting...");
    }
}

// animation that plays while changing phase
if (animate) {
    animationTime--;
    image_angle = (animationTimeMax * animationTime);
    if (animationTime &lt;= 0) {
        animationTime = 0;
        image_angle = 0;
        animate = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animation
event_inherited();

// draw self
if !(ds_list_empty(global.NEXT_PHASE_BLOCKERS)) {
    draw_sprite_ext(sprite_index, image_index, x, y + hoverAmount, 1, 1, image_angle + rotateAmount, c_gray, 1);
} else {
    draw_sprite_ext(sprite_index, image_index, x, y + hoverAmount, 1, 1, image_angle + rotateAmount, c_white, 1);
}

// draw current phase text
draw_set_color(c_red);
draw_set_font(font_health);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if (showPhaseBanner) {
    
    if (bannerTimesOut) {
        bannerTimer--;
        if (bannerTimer &lt;= 0) {
            showPhaseBanner = false;
        }
    }
    
    if (global.GAME_PHASE == "draw") {
        draw_text(bannerX, bannerY, "DRAW PHASE");
    }
    
    if (global.GAME_PHASE == "payment") {
        draw_text(bannerX, bannerY, "PAYMENT PHASE");
    }
    
    if (global.GAME_PHASE == "main1") {
        draw_text(bannerX, bannerY, "MAIN PHASE 1");
    }
    
    if (global.GAME_PHASE == "combat planning") {
        draw_text(bannerX, bannerY, "PLAN YOUR ATTACKS");
    }
    
    if (global.GAME_PHASE == "combat") {
        draw_text(bannerX, bannerY, "COMBAT PHASE");
    }
    
    if (global.GAME_PHASE == "main2") {
        draw_text(bannerX, bannerY, "MAIN PHASE 2");
    }
    
    if (global.GAME_PHASE == "endturn") {
        draw_text(bannerX, bannerY, "END TURN");
    }
}

// reset_text();
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
